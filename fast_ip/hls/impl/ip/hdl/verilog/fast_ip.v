// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fast_ip_fast_ip,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.158000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3081,HLS_SYN_LUT=7289,HLS_VERSION=2024_2}" *)

module fast_ip (
        ap_clk,
        ap_rst_n,
        src_axi_TDATA,
        src_axi_TVALID,
        src_axi_TREADY,
        src_axi_TKEEP,
        src_axi_TSTRB,
        src_axi_TLAST,
        dst_axi_TDATA,
        dst_axi_TVALID,
        dst_axi_TREADY,
        dst_axi_TKEEP,
        dst_axi_TSTRB,
        dst_axi_TLAST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] src_axi_TDATA;
input   src_axi_TVALID;
output   src_axi_TREADY;
input  [3:0] src_axi_TKEEP;
input  [3:0] src_axi_TSTRB;
input  [0:0] src_axi_TLAST;
output  [31:0] dst_axi_TDATA;
output   dst_axi_TVALID;
input   dst_axi_TREADY;
output  [3:0] dst_axi_TKEEP;
output  [3:0] dst_axi_TSTRB;
output  [0:0] dst_axi_TLAST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] img_width;
wire   [31:0] img_height;
wire   [7:0] threshold;
reg   [7:0] threshold_read_reg_659;
reg   [31:0] img_height_read_reg_664;
reg   [31:0] img_width_read_reg_669;
wire   [31:0] sub_fu_579_p2;
reg   [31:0] sub_reg_674;
wire   [31:0] sub120_fu_585_p2;
reg   [31:0] sub120_reg_679;
wire   [31:0] sub23_fu_591_p2;
reg   [31:0] sub23_reg_684;
wire   [31:0] sub122_fu_597_p2;
reg   [31:0] sub122_reg_689;
wire   [30:0] y_2_fu_620_p2;
reg   [30:0] y_2_reg_697;
wire    ap_CS_fsm_state2;
wire   [0:0] cmp21_fu_626_p2;
reg   [0:0] cmp21_reg_702;
wire   [0:0] slt_fu_632_p2;
reg   [0:0] slt_reg_707;
wire   [0:0] cmp123_fu_637_p2;
reg   [0:0] cmp123_reg_712;
wire   [0:0] rev_fu_642_p2;
reg   [0:0] rev_reg_717;
wire    ap_CS_fsm_state3;
wire    grp_fast_ip_Pipeline_col_loop_fu_328_ap_start;
wire    grp_fast_ip_Pipeline_col_loop_fu_328_ap_done;
wire    grp_fast_ip_Pipeline_col_loop_fu_328_ap_idle;
wire    grp_fast_ip_Pipeline_col_loop_fu_328_ap_ready;
wire    grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TREADY;
wire   [31:0] grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TDATA;
wire    grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID;
wire   [3:0] grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TKEEP;
wire   [3:0] grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TSTRB;
wire   [0:0] grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TLAST;
wire    grp_fast_ip_Pipeline_col_loop_fu_328_src_axi_TREADY;
reg    grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [31:0] dst_axi_TDATA_reg;
reg   [3:0] dst_axi_TKEEP_reg;
reg   [3:0] dst_axi_TSTRB_reg;
reg   [0:0] dst_axi_TLAST_reg;
reg   [30:0] y_fu_306;
wire    ap_CS_fsm_state5;
wire   [31:0] zext_ln27_fu_611_p1;
wire   [0:0] icmp_ln27_fu_615_p2;
wire    ap_CS_fsm_state6;
wire    regslice_both_dst_axi_V_data_V_U_apdone_blk;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    regslice_both_src_axi_V_data_V_U_apdone_blk;
wire   [31:0] src_axi_TDATA_int_regslice;
wire    src_axi_TVALID_int_regslice;
reg    src_axi_TREADY_int_regslice;
wire    regslice_both_src_axi_V_data_V_U_ack_in;
wire    regslice_both_src_axi_V_keep_V_U_apdone_blk;
wire   [3:0] src_axi_TKEEP_int_regslice;
wire    regslice_both_src_axi_V_keep_V_U_vld_out;
wire    regslice_both_src_axi_V_keep_V_U_ack_in;
wire    regslice_both_src_axi_V_strb_V_U_apdone_blk;
wire   [3:0] src_axi_TSTRB_int_regslice;
wire    regslice_both_src_axi_V_strb_V_U_vld_out;
wire    regslice_both_src_axi_V_strb_V_U_ack_in;
wire    regslice_both_src_axi_V_last_V_U_apdone_blk;
wire   [0:0] src_axi_TLAST_int_regslice;
wire    regslice_both_src_axi_V_last_V_U_vld_out;
wire    regslice_both_src_axi_V_last_V_U_ack_in;
reg   [31:0] dst_axi_TDATA_int_regslice;
wire    dst_axi_TVALID_int_regslice;
wire    dst_axi_TREADY_int_regslice;
wire    regslice_both_dst_axi_V_data_V_U_vld_out;
wire    regslice_both_dst_axi_V_keep_V_U_apdone_blk;
reg   [3:0] dst_axi_TKEEP_int_regslice;
wire    regslice_both_dst_axi_V_keep_V_U_ack_in_dummy;
wire    regslice_both_dst_axi_V_keep_V_U_vld_out;
wire    regslice_both_dst_axi_V_strb_V_U_apdone_blk;
reg   [3:0] dst_axi_TSTRB_int_regslice;
wire    regslice_both_dst_axi_V_strb_V_U_ack_in_dummy;
wire    regslice_both_dst_axi_V_strb_V_U_vld_out;
wire    regslice_both_dst_axi_V_last_V_U_apdone_blk;
reg   [0:0] dst_axi_TLAST_int_regslice;
wire    regslice_both_dst_axi_V_last_V_U_ack_in_dummy;
wire    regslice_both_dst_axi_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg = 1'b0;
#0 y_fu_306 = 31'd0;
end

fast_ip_fast_ip_Pipeline_col_loop grp_fast_ip_Pipeline_col_loop_fu_328(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fast_ip_Pipeline_col_loop_fu_328_ap_start),
    .ap_done(grp_fast_ip_Pipeline_col_loop_fu_328_ap_done),
    .ap_idle(grp_fast_ip_Pipeline_col_loop_fu_328_ap_idle),
    .ap_ready(grp_fast_ip_Pipeline_col_loop_fu_328_ap_ready),
    .src_axi_TVALID(src_axi_TVALID_int_regslice),
    .dst_axi_TREADY(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TREADY),
    .img_width(img_width_read_reg_669),
    .sub(sub_reg_674),
    .rev(rev_reg_717),
    .cmp21(cmp21_reg_702),
    .threshold(threshold_read_reg_659),
    .sub120(sub120_reg_679),
    .cmp123(cmp123_reg_712),
    .dst_axi_TDATA(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TDATA),
    .dst_axi_TVALID(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID),
    .dst_axi_TKEEP(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TKEEP),
    .dst_axi_TSTRB(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TSTRB),
    .dst_axi_TLAST(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TLAST),
    .src_axi_TDATA(src_axi_TDATA_int_regslice),
    .src_axi_TREADY(grp_fast_ip_Pipeline_col_loop_fu_328_src_axi_TREADY),
    .src_axi_TKEEP(src_axi_TKEEP_int_regslice),
    .src_axi_TSTRB(src_axi_TSTRB_int_regslice),
    .src_axi_TLAST(src_axi_TLAST_int_regslice)
);

fast_ip_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .img_width(img_width),
    .img_height(img_height),
    .threshold(threshold),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fast_ip_regslice_both #(
    .DataWidth( 32 ))
regslice_both_src_axi_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_axi_TDATA),
    .vld_in(src_axi_TVALID),
    .ack_in(regslice_both_src_axi_V_data_V_U_ack_in),
    .data_out(src_axi_TDATA_int_regslice),
    .vld_out(src_axi_TVALID_int_regslice),
    .ack_out(src_axi_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_axi_V_data_V_U_apdone_blk)
);

fast_ip_regslice_both #(
    .DataWidth( 4 ))
regslice_both_src_axi_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_axi_TKEEP),
    .vld_in(src_axi_TVALID),
    .ack_in(regslice_both_src_axi_V_keep_V_U_ack_in),
    .data_out(src_axi_TKEEP_int_regslice),
    .vld_out(regslice_both_src_axi_V_keep_V_U_vld_out),
    .ack_out(src_axi_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_axi_V_keep_V_U_apdone_blk)
);

fast_ip_regslice_both #(
    .DataWidth( 4 ))
regslice_both_src_axi_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_axi_TSTRB),
    .vld_in(src_axi_TVALID),
    .ack_in(regslice_both_src_axi_V_strb_V_U_ack_in),
    .data_out(src_axi_TSTRB_int_regslice),
    .vld_out(regslice_both_src_axi_V_strb_V_U_vld_out),
    .ack_out(src_axi_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_axi_V_strb_V_U_apdone_blk)
);

fast_ip_regslice_both #(
    .DataWidth( 1 ))
regslice_both_src_axi_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(src_axi_TLAST),
    .vld_in(src_axi_TVALID),
    .ack_in(regslice_both_src_axi_V_last_V_U_ack_in),
    .data_out(src_axi_TLAST_int_regslice),
    .vld_out(regslice_both_src_axi_V_last_V_U_vld_out),
    .ack_out(src_axi_TREADY_int_regslice),
    .apdone_blk(regslice_both_src_axi_V_last_V_U_apdone_blk)
);

fast_ip_regslice_both #(
    .DataWidth( 32 ))
regslice_both_dst_axi_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dst_axi_TDATA_int_regslice),
    .vld_in(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID),
    .ack_in(dst_axi_TREADY_int_regslice),
    .data_out(dst_axi_TDATA),
    .vld_out(regslice_both_dst_axi_V_data_V_U_vld_out),
    .ack_out(dst_axi_TREADY),
    .apdone_blk(regslice_both_dst_axi_V_data_V_U_apdone_blk)
);

fast_ip_regslice_both #(
    .DataWidth( 4 ))
regslice_both_dst_axi_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dst_axi_TKEEP_int_regslice),
    .vld_in(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID),
    .ack_in(regslice_both_dst_axi_V_keep_V_U_ack_in_dummy),
    .data_out(dst_axi_TKEEP),
    .vld_out(regslice_both_dst_axi_V_keep_V_U_vld_out),
    .ack_out(dst_axi_TREADY),
    .apdone_blk(regslice_both_dst_axi_V_keep_V_U_apdone_blk)
);

fast_ip_regslice_both #(
    .DataWidth( 4 ))
regslice_both_dst_axi_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dst_axi_TSTRB_int_regslice),
    .vld_in(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID),
    .ack_in(regslice_both_dst_axi_V_strb_V_U_ack_in_dummy),
    .data_out(dst_axi_TSTRB),
    .vld_out(regslice_both_dst_axi_V_strb_V_U_vld_out),
    .ack_out(dst_axi_TREADY),
    .apdone_blk(regslice_both_dst_axi_V_strb_V_U_apdone_blk)
);

fast_ip_regslice_both #(
    .DataWidth( 1 ))
regslice_both_dst_axi_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(dst_axi_TLAST_int_regslice),
    .vld_in(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID),
    .ack_in(regslice_both_dst_axi_V_last_V_U_ack_in_dummy),
    .data_out(dst_axi_TLAST),
    .vld_out(regslice_both_dst_axi_V_last_V_U_vld_out),
    .ack_out(dst_axi_TREADY),
    .apdone_blk(regslice_both_dst_axi_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg <= 1'b1;
        end else if ((grp_fast_ip_Pipeline_col_loop_fu_328_ap_ready == 1'b1)) begin
            grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_fu_306 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_fu_306 <= y_2_reg_697;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cmp123_reg_712 <= cmp123_fu_637_p2;
        cmp21_reg_702 <= cmp21_fu_626_p2;
        slt_reg_707 <= slt_fu_632_p2;
        y_2_reg_697 <= y_2_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_axi_TDATA_reg <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TDATA;
        dst_axi_TKEEP_reg <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TKEEP;
        dst_axi_TLAST_reg <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TLAST;
        dst_axi_TSTRB_reg <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        img_height_read_reg_664 <= img_height;
        img_width_read_reg_669 <= img_width;
        sub120_reg_679 <= sub120_fu_585_p2;
        sub122_reg_689 <= sub122_fu_597_p2;
        sub23_reg_684 <= sub23_fu_591_p2;
        sub_reg_674 <= sub_fu_579_p2;
        threshold_read_reg_659 <= threshold;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        rev_reg_717 <= rev_fu_642_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_fast_ip_Pipeline_col_loop_fu_328_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((regslice_both_dst_axi_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_axi_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_dst_axi_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_axi_TDATA_int_regslice = grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TDATA;
    end else begin
        dst_axi_TDATA_int_regslice = dst_axi_TDATA_reg;
    end
end

always @ (*) begin
    if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_axi_TKEEP_int_regslice = grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TKEEP;
    end else begin
        dst_axi_TKEEP_int_regslice = dst_axi_TKEEP_reg;
    end
end

always @ (*) begin
    if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_axi_TLAST_int_regslice = grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TLAST;
    end else begin
        dst_axi_TLAST_int_regslice = dst_axi_TLAST_reg;
    end
end

always @ (*) begin
    if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_axi_TSTRB_int_regslice = grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TSTRB;
    end else begin
        dst_axi_TSTRB_int_regslice = dst_axi_TSTRB_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        src_axi_TREADY_int_regslice = grp_fast_ip_Pipeline_col_loop_fu_328_src_axi_TREADY;
    end else begin
        src_axi_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln27_fu_615_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_fast_ip_Pipeline_col_loop_fu_328_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((regslice_both_dst_axi_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp123_fu_637_p2 = ((zext_ln27_fu_611_p1 == sub122_reg_689) ? 1'b1 : 1'b0);

assign cmp21_fu_626_p2 = ((y_fu_306 < 31'd3) ? 1'b1 : 1'b0);

assign dst_axi_TVALID = regslice_both_dst_axi_V_data_V_U_vld_out;

assign dst_axi_TVALID_int_regslice = grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID;

assign grp_fast_ip_Pipeline_col_loop_fu_328_ap_start = grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg;

assign grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TREADY = (dst_axi_TREADY_int_regslice & ap_CS_fsm_state4);

assign icmp_ln27_fu_615_p2 = (($signed(zext_ln27_fu_611_p1) < $signed(img_height_read_reg_664)) ? 1'b1 : 1'b0);

assign rev_fu_642_p2 = (slt_reg_707 ^ 1'd1);

assign slt_fu_632_p2 = (($signed(zext_ln27_fu_611_p1) < $signed(sub23_reg_684)) ? 1'b1 : 1'b0);

assign src_axi_TREADY = regslice_both_src_axi_V_data_V_U_ack_in;

assign sub120_fu_585_p2 = ($signed(img_width) + $signed(32'd4294967295));

assign sub122_fu_597_p2 = ($signed(img_height) + $signed(32'd4294967295));

assign sub23_fu_591_p2 = ($signed(img_height) + $signed(32'd4294967293));

assign sub_fu_579_p2 = ($signed(img_width) + $signed(32'd4294967293));

assign y_2_fu_620_p2 = (y_fu_306 + 31'd1);

assign zext_ln27_fu_611_p1 = y_fu_306;


reg find_kernel_block = 0;
// synthesis translate_off
`include "fast_ip_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //fast_ip

