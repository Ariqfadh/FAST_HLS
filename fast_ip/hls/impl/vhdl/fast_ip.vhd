-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fast_ip is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_axi_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    src_axi_TVALID : IN STD_LOGIC;
    src_axi_TREADY : OUT STD_LOGIC;
    src_axi_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    src_axi_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    src_axi_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_axi_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_axi_TVALID : OUT STD_LOGIC;
    dst_axi_TREADY : IN STD_LOGIC;
    dst_axi_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_axi_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_axi_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fast_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fast_ip_fast_ip,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.158000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3081,HLS_SYN_LUT=7289,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal img_width : STD_LOGIC_VECTOR (31 downto 0);
    signal img_height : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold : STD_LOGIC_VECTOR (7 downto 0);
    signal threshold_read_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_height_read_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_width_read_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub120_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub120_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub23_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub23_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub122_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub122_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_fu_620_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_2_reg_697 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cmp21_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp21_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp123_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp123_reg_712 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fast_ip_Pipeline_col_loop_fu_328_ap_start : STD_LOGIC;
    signal grp_fast_ip_Pipeline_col_loop_fu_328_ap_done : STD_LOGIC;
    signal grp_fast_ip_Pipeline_col_loop_fu_328_ap_idle : STD_LOGIC;
    signal grp_fast_ip_Pipeline_col_loop_fu_328_ap_ready : STD_LOGIC;
    signal grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TREADY : STD_LOGIC;
    signal grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID : STD_LOGIC;
    signal grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fast_ip_Pipeline_col_loop_fu_328_src_axi_TREADY : STD_LOGIC;
    signal grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal dst_axi_TDATA_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_axi_TKEEP_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_axi_TSTRB_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_axi_TLAST_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_306 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln27_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_dst_axi_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal regslice_both_src_axi_V_data_V_U_apdone_blk : STD_LOGIC;
    signal src_axi_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal src_axi_TVALID_int_regslice : STD_LOGIC;
    signal src_axi_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_src_axi_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_axi_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal src_axi_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_src_axi_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_axi_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_axi_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal src_axi_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_src_axi_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_axi_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_axi_V_last_V_U_apdone_blk : STD_LOGIC;
    signal src_axi_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_axi_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_axi_V_last_V_U_ack_in : STD_LOGIC;
    signal dst_axi_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_axi_TVALID_int_regslice : STD_LOGIC;
    signal dst_axi_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dst_axi_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_axi_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal dst_axi_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_dst_axi_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_axi_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_axi_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal dst_axi_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_dst_axi_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_axi_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst_axi_V_last_V_U_apdone_blk : STD_LOGIC;
    signal dst_axi_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_dst_axi_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst_axi_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fast_ip_fast_ip_Pipeline_col_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_axi_TVALID : IN STD_LOGIC;
        dst_axi_TREADY : IN STD_LOGIC;
        img_width : IN STD_LOGIC_VECTOR (31 downto 0);
        sub : IN STD_LOGIC_VECTOR (31 downto 0);
        rev : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp21 : IN STD_LOGIC_VECTOR (0 downto 0);
        threshold : IN STD_LOGIC_VECTOR (7 downto 0);
        sub120 : IN STD_LOGIC_VECTOR (31 downto 0);
        cmp123 : IN STD_LOGIC_VECTOR (0 downto 0);
        dst_axi_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst_axi_TVALID : OUT STD_LOGIC;
        dst_axi_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_axi_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_axi_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        src_axi_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        src_axi_TREADY : OUT STD_LOGIC;
        src_axi_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        src_axi_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        src_axi_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fast_ip_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        img_width : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_height : OUT STD_LOGIC_VECTOR (31 downto 0);
        threshold : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fast_ip_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_fast_ip_Pipeline_col_loop_fu_328 : component fast_ip_fast_ip_Pipeline_col_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fast_ip_Pipeline_col_loop_fu_328_ap_start,
        ap_done => grp_fast_ip_Pipeline_col_loop_fu_328_ap_done,
        ap_idle => grp_fast_ip_Pipeline_col_loop_fu_328_ap_idle,
        ap_ready => grp_fast_ip_Pipeline_col_loop_fu_328_ap_ready,
        src_axi_TVALID => src_axi_TVALID_int_regslice,
        dst_axi_TREADY => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TREADY,
        img_width => img_width_read_reg_669,
        sub => sub_reg_674,
        rev => rev_reg_717,
        cmp21 => cmp21_reg_702,
        threshold => threshold_read_reg_659,
        sub120 => sub120_reg_679,
        cmp123 => cmp123_reg_712,
        dst_axi_TDATA => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TDATA,
        dst_axi_TVALID => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID,
        dst_axi_TKEEP => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TKEEP,
        dst_axi_TSTRB => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TSTRB,
        dst_axi_TLAST => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TLAST,
        src_axi_TDATA => src_axi_TDATA_int_regslice,
        src_axi_TREADY => grp_fast_ip_Pipeline_col_loop_fu_328_src_axi_TREADY,
        src_axi_TKEEP => src_axi_TKEEP_int_regslice,
        src_axi_TSTRB => src_axi_TSTRB_int_regslice,
        src_axi_TLAST => src_axi_TLAST_int_regslice);

    CONTROL_BUS_s_axi_U : component fast_ip_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        img_width => img_width,
        img_height => img_height,
        threshold => threshold,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_src_axi_V_data_V_U : component fast_ip_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_axi_TDATA,
        vld_in => src_axi_TVALID,
        ack_in => regslice_both_src_axi_V_data_V_U_ack_in,
        data_out => src_axi_TDATA_int_regslice,
        vld_out => src_axi_TVALID_int_regslice,
        ack_out => src_axi_TREADY_int_regslice,
        apdone_blk => regslice_both_src_axi_V_data_V_U_apdone_blk);

    regslice_both_src_axi_V_keep_V_U : component fast_ip_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_axi_TKEEP,
        vld_in => src_axi_TVALID,
        ack_in => regslice_both_src_axi_V_keep_V_U_ack_in,
        data_out => src_axi_TKEEP_int_regslice,
        vld_out => regslice_both_src_axi_V_keep_V_U_vld_out,
        ack_out => src_axi_TREADY_int_regslice,
        apdone_blk => regslice_both_src_axi_V_keep_V_U_apdone_blk);

    regslice_both_src_axi_V_strb_V_U : component fast_ip_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_axi_TSTRB,
        vld_in => src_axi_TVALID,
        ack_in => regslice_both_src_axi_V_strb_V_U_ack_in,
        data_out => src_axi_TSTRB_int_regslice,
        vld_out => regslice_both_src_axi_V_strb_V_U_vld_out,
        ack_out => src_axi_TREADY_int_regslice,
        apdone_blk => regslice_both_src_axi_V_strb_V_U_apdone_blk);

    regslice_both_src_axi_V_last_V_U : component fast_ip_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_axi_TLAST,
        vld_in => src_axi_TVALID,
        ack_in => regslice_both_src_axi_V_last_V_U_ack_in,
        data_out => src_axi_TLAST_int_regslice,
        vld_out => regslice_both_src_axi_V_last_V_U_vld_out,
        ack_out => src_axi_TREADY_int_regslice,
        apdone_blk => regslice_both_src_axi_V_last_V_U_apdone_blk);

    regslice_both_dst_axi_V_data_V_U : component fast_ip_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dst_axi_TDATA_int_regslice,
        vld_in => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID,
        ack_in => dst_axi_TREADY_int_regslice,
        data_out => dst_axi_TDATA,
        vld_out => regslice_both_dst_axi_V_data_V_U_vld_out,
        ack_out => dst_axi_TREADY,
        apdone_blk => regslice_both_dst_axi_V_data_V_U_apdone_blk);

    regslice_both_dst_axi_V_keep_V_U : component fast_ip_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dst_axi_TKEEP_int_regslice,
        vld_in => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID,
        ack_in => regslice_both_dst_axi_V_keep_V_U_ack_in_dummy,
        data_out => dst_axi_TKEEP,
        vld_out => regslice_both_dst_axi_V_keep_V_U_vld_out,
        ack_out => dst_axi_TREADY,
        apdone_blk => regslice_both_dst_axi_V_keep_V_U_apdone_blk);

    regslice_both_dst_axi_V_strb_V_U : component fast_ip_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dst_axi_TSTRB_int_regslice,
        vld_in => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID,
        ack_in => regslice_both_dst_axi_V_strb_V_U_ack_in_dummy,
        data_out => dst_axi_TSTRB,
        vld_out => regslice_both_dst_axi_V_strb_V_U_vld_out,
        ack_out => dst_axi_TREADY,
        apdone_blk => regslice_both_dst_axi_V_strb_V_U_apdone_blk);

    regslice_both_dst_axi_V_last_V_U : component fast_ip_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => dst_axi_TLAST_int_regslice,
        vld_in => grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID,
        ack_in => regslice_both_dst_axi_V_last_V_U_ack_in_dummy,
        data_out => dst_axi_TLAST,
        vld_out => regslice_both_dst_axi_V_last_V_U_vld_out,
        ack_out => dst_axi_TREADY,
        apdone_blk => regslice_both_dst_axi_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fast_ip_Pipeline_col_loop_fu_328_ap_ready = ap_const_logic_1)) then 
                    grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    y_fu_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_fu_306 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y_fu_306 <= y_2_reg_697;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cmp123_reg_712 <= cmp123_fu_637_p2;
                cmp21_reg_702 <= cmp21_fu_626_p2;
                slt_reg_707 <= slt_fu_632_p2;
                y_2_reg_697 <= y_2_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                dst_axi_TDATA_reg <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TDATA;
                dst_axi_TKEEP_reg <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TKEEP;
                dst_axi_TLAST_reg <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TLAST;
                dst_axi_TSTRB_reg <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                img_height_read_reg_664 <= img_height;
                img_width_read_reg_669 <= img_width;
                sub120_reg_679 <= sub120_fu_585_p2;
                sub122_reg_689 <= sub122_fu_597_p2;
                sub23_reg_684 <= sub23_fu_591_p2;
                sub_reg_674 <= sub_fu_579_p2;
                threshold_read_reg_659 <= threshold;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                rev_reg_717 <= rev_fu_642_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_fast_ip_Pipeline_col_loop_fu_328_ap_done, ap_CS_fsm_state4, icmp_ln27_fu_615_p2, ap_CS_fsm_state6, regslice_both_dst_axi_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln27_fu_615_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_fast_ip_Pipeline_col_loop_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (((regslice_both_dst_axi_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_fast_ip_Pipeline_col_loop_fu_328_ap_done)
    begin
        if ((grp_fast_ip_Pipeline_col_loop_fu_328_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(regslice_both_dst_axi_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_dst_axi_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_both_dst_axi_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_dst_axi_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_both_dst_axi_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_dst_axi_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp123_fu_637_p2 <= "1" when (zext_ln27_fu_611_p1 = sub122_reg_689) else "0";
    cmp21_fu_626_p2 <= "1" when (unsigned(y_fu_306) < unsigned(ap_const_lv31_3)) else "0";

    dst_axi_TDATA_int_regslice_assign_proc : process(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TDATA, grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID, ap_CS_fsm_state4, dst_axi_TDATA_reg)
    begin
        if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dst_axi_TDATA_int_regslice <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TDATA;
        else 
            dst_axi_TDATA_int_regslice <= dst_axi_TDATA_reg;
        end if; 
    end process;


    dst_axi_TKEEP_int_regslice_assign_proc : process(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID, grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TKEEP, ap_CS_fsm_state4, dst_axi_TKEEP_reg)
    begin
        if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dst_axi_TKEEP_int_regslice <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TKEEP;
        else 
            dst_axi_TKEEP_int_regslice <= dst_axi_TKEEP_reg;
        end if; 
    end process;


    dst_axi_TLAST_int_regslice_assign_proc : process(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID, grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TLAST, ap_CS_fsm_state4, dst_axi_TLAST_reg)
    begin
        if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dst_axi_TLAST_int_regslice <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TLAST;
        else 
            dst_axi_TLAST_int_regslice <= dst_axi_TLAST_reg;
        end if; 
    end process;


    dst_axi_TSTRB_int_regslice_assign_proc : process(grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID, grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TSTRB, ap_CS_fsm_state4, dst_axi_TSTRB_reg)
    begin
        if (((grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            dst_axi_TSTRB_int_regslice <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TSTRB;
        else 
            dst_axi_TSTRB_int_regslice <= dst_axi_TSTRB_reg;
        end if; 
    end process;

    dst_axi_TVALID <= regslice_both_dst_axi_V_data_V_U_vld_out;
    dst_axi_TVALID_int_regslice <= grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TVALID;
    grp_fast_ip_Pipeline_col_loop_fu_328_ap_start <= grp_fast_ip_Pipeline_col_loop_fu_328_ap_start_reg;
    grp_fast_ip_Pipeline_col_loop_fu_328_dst_axi_TREADY <= (dst_axi_TREADY_int_regslice and ap_CS_fsm_state4);
    icmp_ln27_fu_615_p2 <= "1" when (signed(zext_ln27_fu_611_p1) < signed(img_height_read_reg_664)) else "0";
    rev_fu_642_p2 <= (slt_reg_707 xor ap_const_lv1_1);
    slt_fu_632_p2 <= "1" when (signed(zext_ln27_fu_611_p1) < signed(sub23_reg_684)) else "0";
    src_axi_TREADY <= regslice_both_src_axi_V_data_V_U_ack_in;

    src_axi_TREADY_int_regslice_assign_proc : process(grp_fast_ip_Pipeline_col_loop_fu_328_src_axi_TREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_axi_TREADY_int_regslice <= grp_fast_ip_Pipeline_col_loop_fu_328_src_axi_TREADY;
        else 
            src_axi_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    sub120_fu_585_p2 <= std_logic_vector(unsigned(img_width) + unsigned(ap_const_lv32_FFFFFFFF));
    sub122_fu_597_p2 <= std_logic_vector(unsigned(img_height) + unsigned(ap_const_lv32_FFFFFFFF));
    sub23_fu_591_p2 <= std_logic_vector(unsigned(img_height) + unsigned(ap_const_lv32_FFFFFFFD));
    sub_fu_579_p2 <= std_logic_vector(unsigned(img_width) + unsigned(ap_const_lv32_FFFFFFFD));
    y_2_fu_620_p2 <= std_logic_vector(unsigned(y_fu_306) + unsigned(ap_const_lv31_1));
    zext_ln27_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_fu_306),32));
end behav;
